using Microsoft.VisualStudio.TestTools.UnitTesting;
using kata_pen;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace kata_pen.Tests
{
    [TestClass()]
    public class PencilTests
    {
        [TestMethod()]
        public void writeTest()
        {
            // Test that our text comes back as expected.
            var writer = new Pencil();
            var text = "test run";
            var output = writer.write(text);
            Assert.AreEqual(text, output);
        }
        [TestMethod()]
        public void writeAppendTest()
        {
            // Test that our text comes back as expected.
            var writer = new Pencil();
            var text = "She sells sea shells";
            var output = writer.write(text);
            // Test that writing again adds more.
            var text2 = " down by the sea shore";
            output = writer.write(text2);
            Assert.AreEqual(text + text2, output);
        }
        [TestMethod()]
        public void writeDegradationTest()
        {
            // Make a pencil with a durability value
            var writer = new Pencil()
            {
                Durability = 4
            };
            // Test that the capitol letter at the start make it so
            // only "Text" will fit.
            var output = writer.write("Text");
            Assert.AreEqual("Tex", output);

            // Make another pencil with a durabiltiy value
            writer = new Pencil()
            {
                Durability = 4
            };
            output = writer.write("text");
            // Test that all lower case letters will make it so
            // all of "text" will fit.
            Assert.AreEqual("text", output);
        }

        [TestMethod()]
        public void writeSharpenTest()
        {
            // Make a pencil with a durability value
            var writer = new Pencil()
            {
                Durability = 4
            };
            // Test that the capitol letter at the start make it so
            // only "Text" will fit.
            var output = writer.write("Text");
            Assert.AreEqual("Tex", output);
            writer.sharpen();
            output = writer.write("more stuff");
            // should only have taken the space since pencil was 0 length.
            Assert.AreEqual("Tex ", output);
            // Lets make room for another sharpen.
            writer.length = 1;
            writer.sharpen();
            output = writer.write("Mexican");
            // Room for for more character, or three if one is upper case as is here.
            Assert.AreEqual("Tex Mex", output);
        }
        [TestMethod()]
        public void writeEraseTest()
        {
            var writer = new Pencil();
            var output = writer.write("How much wood would a woodchuck chuck if a woodchuck could chuck wood?");
            Assert.AreEqual(output, "How much wood would a woodchuck chuck if a woodchuck could chuck wood?");

            // Erase chuck and see if we get what we would expect.
            writer.erase("chuck");
            output = writer.write("");
            Assert.AreEqual(output, "How much wood would a woodchuck chuck if a woodchuck could       wood?");

            // Erase chuck again and see if we get what we would expect.
            writer.erase("chuck");
            output = writer.write("");
            Assert.AreEqual(output, "How much wood would a woodchuck chuck if a wood      could       wood?");
        }
    }
}